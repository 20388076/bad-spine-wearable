%% =============================================================
%  Train and Test Decision Tree and Random Forest Classifiers
%  Author: Teo (Auto-generated by ChatGPT)
%  Date: <auto>
%  =============================================================
clc; clear; close all;

%% ---- Load Datasets ----
fprintf('\nLoading datasets...\n');

% Load training and testing datasets
X_train = readmatrix('X_data_9.71DT.csv');
y_train = readmatrix('y_data_9.71DT.csv');
X_test  = readmatrix('X_test_9.71DT.csv');
y_test  = readmatrix('y_test_9.71DT.csv');

% Load full dataset for re-test
X_data = readmatrix('X_data.csv');
y_data = readmatrix('y_data.csv');

fprintf('Data loaded successfully.\n');
fprintf('X_train: %d x %d | X_test: %d x %d\n', size(X_train,1), size(X_train,2), size(X_test,1), size(X_test,2));

%% ---- Decision Tree Classifier ----
fprintf('\n=====================================\n');
fprintf('Training Decision Tree Classifier...\n');

DT_Model = fitctree(X_train, y_train, ...
    'MinLeafSize', 5, ...
    'PredictorSelection', 'allsplits', ...
    'Surrogate', 'off');

fprintf('Decision Tree trained successfully.\n');

% ---- Test on X_test ----
y_pred_DT_test = predict(DT_Model, X_test);
acc_DT_test = mean(y_pred_DT_test == y_test) * 100;

% ---- Re-test on X_data ----
y_pred_DT_data = predict(DT_Model, X_data);
acc_DT_data = mean(y_pred_DT_data == y_data) * 100;

fprintf('DT Accuracy (test set): %.2f%%\n', acc_DT_test);
fprintf('DT Accuracy (full data): %.2f%%\n', acc_DT_data);

% ---- Confusion Matrices ----
figure('Name','Decision Tree - Test Set');
cm_DT_test = confusionchart(y_test, y_pred_DT_test, 'Title', 'Decision Tree (Test Set)');
cm_DT_test.ColumnSummary = 'column-normalized';
cm_DT_test.RowSummary = 'row-normalized';

figure('Name','Decision Tree - Full Dataset');
cm_DT_data = confusionchart(y_data, y_pred_DT_data, 'Title', 'Decision Tree (Full Dataset)');
cm_DT_data.ColumnSummary = 'column-normalized';
cm_DT_data.RowSummary = 'row-normalized';

%% ---- Random Forest Classifier ----
fprintf('\n=====================================\n');
fprintf('Training Random Forest Classifier...\n');

RF_Model = TreeBagger(100, X_train, y_train, ...
    'OOBPrediction', 'on', ...
    'Method', 'classification', ...
    'MinLeafSize', 5, ...
    'NumPredictorsToSample', 'all', ...
    'PredictorSelection', 'allsplits');

fprintf('Random Forest trained successfully.\n');

% ---- Test on X_test ----
[y_pred_RF_test, ~] = predict(RF_Model, X_test);
y_pred_RF_test = str2double(y_pred_RF_test);
acc_RF_test = mean(y_pred_RF_test == y_test) * 100;

% ---- Re-test on X_data ----
[y_pred_RF_data, ~] = predict(RF_Model, X_data);
y_pred_RF_data = str2double(y_pred_RF_data);
acc_RF_data = mean(y_pred_RF_data == y_data) * 100;

fprintf('RF Accuracy (test set): %.2f%%\n', acc_RF_test);
fprintf('RF Accuracy (full data): %.2f%%\n', acc_RF_data);

% ---- Confusion Matrices ----
figure('Name','Random Forest - Test Set');
cm_RF_test = confusionchart(y_test, y_pred_RF_test, 'Title', 'Random Forest (Test Set)');
cm_RF_test.ColumnSummary = 'column-normalized';
cm_RF_test.RowSummary = 'row-normalized';

figure('Name','Random Forest - Full Dataset');
cm_RF_data = confusionchart(y_data, y_pred_RF_data, 'Title', 'Random Forest (Full Dataset)');
cm_RF_data.ColumnSummary = 'column-normalized';
cm_RF_data.RowSummary = 'row-normalized';

%% ---- Display Summary ----
fprintf('\n=====================================\n');
fprintf('Summary of Results:\n');
fprintf('-------------------------------------\n');
fprintf('Decision Tree - Test Acc: %.2f%% | Full Data Acc: %.2f%%\n', acc_DT_test, acc_DT_data);
fprintf('Random Forest - Test Acc: %.2f%% | Full Data Acc: %.2f%%\n', acc_RF_test, acc_RF_data);
fprintf('=====================================\n');

%% ---- Save Models (optional) ----
saveLearnerForCoder(DT_Model, 'DecisionTree_Model');
saveLearnerForCoder(RF_Model, 'RandomForest_Model');

fprintf('\nModels saved successfully.\n');
