#include <Arduino.h>
#include <Wire.h>
#include <algorithm>
#include <iostream>
#include "fft.h"
#define FFT_N 32 // Must be a power of 2 >= 32

float acc_x_data[] = {
    0.192, 0.172, 0.196, 0.182, 0.196, 0.192, 0.165, 0.18,  0.172, 0.18, 0.194, 0.187, 0.196, 0.208, 0.182, 0.199,
    0.187, 0.189, 0.172, 0.187, 0.204, 0.199, 0.189, 0.177, 0.206, 0.16, 0.189, 0.201, 0.175, 0.199, 0.199, 0.199,
};

float acc_y_data[] = {0.048, 0.055, 0.043, 0.036, 0.022, 0.045, 0.060, 0.045, 0.034, 0.055, 0.048,
                      0.045, 0.043, 0.038, 0.038, 0.055, 0.050, 0.041, 0.038, 0.031, 0.024, 0.031,
                      0.041, 0.041, 0.060, 0.053, 0.055, 0.043, 0.024, 0.041, 0.053, 0.034};

float acc_z_data[] = {10.362, 10.372, 10.353, 10.372, 10.357, 10.381, 10.364, 10.403, 10.367, 10.364, 10.405,
                      10.376, 10.4,   10.369, 10.367, 10.362, 10.384, 10.381, 10.391, 10.398, 10.372, 10.408,
                      10.379, 10.396, 10.384, 10.364, 10.367, 10.374, 10.319, 10.362, 10.374, 10.348};

float gyro_x_data[] = {-0.009, -0.009, -0.007, -0.009, -0.009, -0.009, -0.009, -0.009, -0.009, -0.009, -0.008,
                       -0.009, -0.009, -0.009, -0.007, -0.008, -0.009, -0.008, -0.009, -0.008, -0.009, -0.008,
                       -0.009, -0.008, -0.008, -0.009, -0.009, -0.009, -0.009, -0.009, -0.008, -0.009};

float gyro_y_data[] = {0.015, 0.014, 0.015, 0.015, 0.016, 0.015, 0.014, 0.015, 0.015, 0.015, 0.014,
                       0.013, 0.014, 0.014, 0.014, 0.015, 0.015, 0.015, 0.014, 0.015, 0.015, 0.014,
                       0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.015, 0.015};

float gyro_z_data[] = {-0.016, -0.017, -0.017, -0.016, -0.017, -0.016, -0.017, -0.017, -0.017, -0.015, -0.015,
                       -0.017, -0.015, -0.016, -0.016, -0.015, -0.015, -0.015, -0.016, -0.016, -0.016, -0.015,
                       -0.016, -0.016, -0.016, -0.016, -0.016, -0.017, -0.017, -0.017, -0.015, -0.016};

float FFT_input[FFT_N];
float FFT_output[FFT_N];
int window_size = 32; // Window size

float
production_cubic(float x, float y, float z) {
    float results = 0;
    float prod = fabs(x * y * z);
    results = pow(prod, 1.0 / 3);
    return results;
}

float
compute_fft_energy(float* magnitude, int len) {
    float sum = 0;

    for (int i = 0; i < len; i++) {
        sum += magnitude[i] * magnitude[i];
    }

    return sum / len;
}

float
window_max(float* data, int len) {
    float max_val = data[0];
    for (int i = 1; i < len; i++) {
        if (data[i] > max_val) {
            max_val = data[i];
        }
    }
    return max_val;
}

float
window_mean(float* data, int len) {
    float sum = 0;
    for (int i = 0; i < len; i++) {
        sum += data[i];
    }
    return sum / len;
}

float
window_abs_mean(float* data, int len) {
    float sum = 0;
    for (int i = 0; i < len; i++) {
        sum += fabs(data[i]);
    }
    return sum / len;
}

float
window_min(float* data, int len) {
    float min_val = data[0];
    for (int i = 1; i < len; i++) {
        if (data[i] < min_val) {
            min_val = data[i];
        }
    }
    return min_val;
}

/*
float
compute_mad(float* data, int len) {
    float mean = window_mean(data, len);
    float sum = 0;
    for (int i = 0; i < len; i++) {
        sum += fabs(data[i] - mean);
    }
    return sum / len;
}
*/
float
compute_iqr(float* data, int len) {
    float sorted[len];
    memcpy(sorted, data, sizeof(float) * len);
    std::sort(sorted, sorted + len);

    float q1_pos = (len - 1) * 0.25;
    float q3_pos = (len - 1) * 0.75;

    int q1_idx = (int)q1_pos;
    int q3_idx = (int)q3_pos;

    float q1 = sorted[q1_idx] + (sorted[q1_idx + 1] - sorted[q1_idx]) * (q1_pos - q1_idx);
    float q3 = sorted[q3_idx] + (sorted[q3_idx + 1] - sorted[q3_idx]) * (q3_pos - q3_idx);

    return q3 - q1;
}

float
compute_rms(float* data, int len) {
    float sum = 0;
    for (int i = 0; i < len; i++) {
        sum += fabs(data[i] * data[i]);
    }
    return sqrt(sum / len);
}

void
compute_FFT(float* input, float* real_out, float* magnitude_out, int size) {
    FFT_real myFFT(size);
    myFFT.setInput(input);
    myFFT.compute();          // Calculate real and imaginary parts
    myFFT.computeMagnitude(); // Compute magnitude

    float* real = myFFT.getReal();
    float* mag = myFFT.getMagnitude();

    for (int i = 0; i < size; ++i) {
        real_out[i] = real[i];
        magnitude_out[i] = mag[i];
    }
}

void
setup() {
    Serial.begin(115200);
}

void
loop() {
    float fft_real_acc_y[FFT_N];
    float fft_mag_acc_y[FFT_N];

    compute_FFT(acc_y_data, fft_real_acc_y, fft_mag_acc_y, FFT_N);

    float output_matrix[window_size][10]; // Initialize output matrix

    float f0 = 0, f1 = 0, f2[window_size], f3 = 0, f4 = 0, f5 = 0, f6 = 0, f7 = 0, f8[FFT_N],
          f9 = 0; // initialize features

    f0 = compute_iqr(gyro_z_data, window_size); // IQR_gyro z
    f1 = window_abs_mean(acc_x_data, window_size) + window_abs_mean(acc_y_data, window_size)
         + window_abs_mean(acc_z_data, window_size); // Signal Magnitude Area Accelerometer
    for (int i = 0; i < window_size; i++) {
        f2[i] = production_cubic(acc_x_data[i], acc_y_data[i],
                                 acc_z_data[i]); // Acceleration Cubic Product Magnitude
    }
    f3 = window_min(acc_y_data, window_size);            // acceleration_y_window_min
    f4 = compute_rms(acc_y_data, window_size);           // RMS_acceleration_y
    f5 = compute_fft_energy(fft_mag_acc_y, window_size); // Energy_acceleration_y
    f6 = window_mean(acc_y_data, window_size);           // acceleration_y_window_mean
    f7 = window_max(acc_y_data, window_size);            // acceleration_y_window_max
    // f8 = fft_real_acc_y;                            // FFT_acceleration y
    // f9 = acc_y_data;                           // acceleration_y

    // Fill matrix
    for (int i = 0; i < window_size; i++) {

        output_matrix[i][0] = f0;                // IQR_gyro z
        output_matrix[i][1] = f1;                // Signal Magnitude Area Accelerometer
        output_matrix[i][2] = f2[i];             // Acceleration Cubic Product Magnitude
        output_matrix[i][3] = f3;                // acceleration_y_window_min
        output_matrix[i][4] = f4;                // RMS_acceleration_y
        output_matrix[i][5] = f5;                // Energy_acceleration_y
        output_matrix[i][6] = f6;                // acceleration_y_window_mean
        output_matrix[i][7] = f7;                // acceleration_y_window_max
        output_matrix[i][8] = fft_real_acc_y[i]; // FFT_acceleration y
        output_matrix[i][9] = acc_y_data[i];     // acceleration_y
    }

    Serial.println("\n=== Output Matrix (32x10) ===");
    for (int i = 0; i < window_size; i++) {
        for (int j = 0; j < 10; j++) {
            Serial.printf("%.3f,", output_matrix[i][j]);
        }
        Serial.println();
    }

    /*
    Serial.println("\n=== FFT_output ===");
    for (int i = 0; i < FFT_N; i++) {
        Serial.printf("%.3f\t", FFT_output[i]);
        
    }
    */

    Serial.println();
    delay(100);
}